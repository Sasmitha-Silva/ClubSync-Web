// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  volunteer
  clubAdmin
  eventOrganizer
  systemAdmin
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  phone         String?
  password      String    @default("")
  image         String    @default("")
  role          Role      @default(volunteer)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  lastLogin     DateTime? @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Club {
  id        String     @id @default(uuid())
  name      String
  elections Election[]
}

model Election {
  id          String        @id @default(uuid())
  clubId      String
  club        Club          @relation(fields: [clubId], references: [id])
  title       String
  subtitle    String?
  description String?
  year        Int
  votingStart DateTime
  votingEnd   DateTime
  positions   Position[]
  tokens      VotingToken[]
  createdAt   DateTime      @default(now())
}

model Position {
  id          String      @id @default(uuid())
  name        String
  description String?
  electionId  String
  election    Election    @relation(fields: [electionId], references: [id])
  candidates  Candidate[]
}

model Candidate {
  id         String   @id @default(uuid())
  name       String
  image      String   @default("")
  vision     String?
  experience String?
  positionId String
  position   Position @relation(fields: [positionId], references: [id])
}

model VotingToken {
  id         String   @id @default(uuid())
  electionId String
  election   Election @relation(fields: [electionId], references: [id])
  used       Boolean  @default(false)
  issuedTo   String // User ID (only during pre-voting)
  issuedAt   DateTime @default(now())
}

model Vote {
  id          String   @id @default(uuid())
  electionId  String
  positionId  String
  candidateId String
  createdAt   DateTime @default(now())
}
